/*!
 * bfluid.less
 * @author Blowback.fi
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License (GPL)
 * @version 1.0.1 [2013-2-18]
 */


/**
 * Default settings
 */
@defaultGutter: 26;
@defaultPadding: 0;
@defaultContainer: 960;
@defaultColumns: 12;


/* --------------------------------------------------------------------------
   B.Fluid Grid styles
   -------------------------------------------------------------------------- */

#grid {
	
	/**
	 * base styles for containers
	 */
	.grid_container() {
		display: block;
		padding-left: 0;
		padding-right: 0;
		margin-left: auto;
		margin-right: auto;
	}
	
	/**
	 * base styles for columns
	 */
	.grid_column() {
		box-sizing: content-box;
		-moz-box-sizing: content-box;
		-webkit-box-sizing: content-box;
		position: relative;
		display: inline;
		float: left;
		// nested colums overflow
		&.outer {
			overflow: hidden;
		}
	}
	
	/**
	 * reset columns
	 */
	.reset() {
		(~'[class*="container_"] [class*="grid_"]') {
			display: block;
			float: none;
			width: auto;
			left: 0;
			right: 0;
		}
	}
	
	/**
	 * micro clearfix
	 */
	.clearfix() {
		*zoom: 1;
		&:before,
		&:after {
			display: table;
			content: "";
			line-height: 0;
		}
		&:after {
			clear: both;
		}
	}
	
/* --------------------------------------------------------------------------
   Fluid Container width, margins & paddings
   -------------------------------------------------------------------------- */
	
	/**
	 * container width
	 */
	.fluid_container(@gutter, @padding, @container) {
		width: 100%;
	}
	
	/**
	 * some gutters & zero padding
	 */
	.fluid_container(@gutter, @padding, @container) when (@gutter > 0%) and (@padding = 0%) {
		&.inner {
			width: 100 / (100 - @gutter) * 100%;
			margin-left: (100 / (100 - @gutter) * 100 - 100) / 2 * -1%;
			margin-right: (100 / (100 - @gutter) * 100 - 100) / 2 * -1%;
			*width: 100 / (100 - (@gutter - (.5 / @container * 100 * 1%))) * 100%;
			*margin-left: (100 / (100 - (@gutter - (.25 / @container * 100 * 1%))) * 100 - 100) / 2 * -1%;
			*margin-right: (100 / (100 - (@gutter - (.25 / @container * 100 * 1%))) * 100 - 100) / 2 * -1%;
		}
		&.outer {
			padding-left: @gutter / 2;
			padding-right: @gutter / 2;
			*padding-left: (@gutter - (.25 / @container * 100 * 1%)) / 2;
			*padding-right: (@gutter - (.25 / @container * 100 * 1%)) / 2;
		}
	}
	
	/**
	 * zero gutters & some padding
	 */
	.fluid_container(@gutter, @padding, @container) when (@gutter = 0%) and (@padding > 0%) {
		&.inner {
			width: 100 / (100 - @padding) * 100%;
			margin-left: (100 / (100 - @padding) * 100 - 100) / 2 * -1%;
			margin-right: (100 / (100 - @padding) * 100 - 100) / 2 * -1%;
			*width: 100 / (100 - (@padding - (.5 / @container * 100 * 1%))) * 100%;
			*margin-left: (100 / (100 - (@padding - (.25 / @container * 100 * 1%))) * 100 - 100) / 2 * -1%;
			*margin-right: (100 / (100 - (@padding - (.25 / @container * 100 * 1%))) * 100 - 100) / 2 * -1%;
		}
		&.outer {
			padding-left: @padding / 2;
			padding-right: @padding / 2;
			*padding-left: (@padding - (.25 / @container * 100 * 1%)) / 2;
			*padding-right: (@padding - (.25 / @container * 100 * 1%)) / 2;
		}
	}
	
	/**
	 * some gutters & some padding
	 */
	.fluid_container(@gutter, @padding, @container) when (@gutter > 0%) and (@padding > 0%) {
		&.inner {
			width: 100 / (100 - (@gutter + @padding)) * 100%;
			margin-left: (100 / (100 - (@gutter + @padding)) * 100 - 100) / 2 * -1%;
			margin-right: (100 / (100 - (@gutter + @padding)) * 100 - 100) / 2 * -1%;
			*width: 100 / (100 - ((@gutter + @padding) - (.5 / @container * 100 * 1%))) * 100%;
			*margin-left: (100 / (100 - ((@gutter + @padding) - (.25 / @container * 100 * 1%))) * 100 - 100) / 2 * -1%;
			*margin-right: (100 / (100 - ((@gutter + @padding) - (.25 / @container * 100 * 1%))) * 100 - 100) / 2 * -1%;
			
		}
		&.outer {
			padding-left: (@gutter + @padding) / 2;
			padding-right: (@gutter + @padding) / 2;
			*padding-left: ((@gutter + @padding) - (.25 / @container * 100 * 1%)) / 2;
			*padding-right: ((@gutter + @padding) - (.25 / @container * 100 * 1%)) / 2;
		}
	}
	
/* --------------------------------------------------------------------------
   Fixed Container width, margins & paddings
   -------------------------------------------------------------------------- */
	
	/**
	 * container width
	 */
	.fixed_container(@gutter, @padding, @container) {
		width: @container + 0px;
	}
	
	/**
	 * some gutters & zero padding
	 */
	.fixed_container(@gutter, @padding, @container) when (@gutter > 0) and (@padding = 0) {
		&.inner {
			margin-left: (@gutter / 2) * -1px;
			margin-right: (@gutter / 2) * -1px;
		}
		&.outer {
			padding-left: (@gutter / 2) * 1px;
			padding-right: (@gutter / 2) * 1px;
		}
	}
	
	/**
	 * zero gutters & some padding
	 */
	.fixed_container(@gutter, @padding, @container) when (@gutter = 0) and (@padding > 0) {
		&.inner {
			margin-left: (@padding / 2) * -1px;
			margin-right: (@padding / 2) * -1px;
		}
		&.outer {
			padding-left: (@padding / 2) * 1px;
			padding-right: (@padding / 2) * 1px;
		}
	}
	
	/**
	 * some gutters & some padding
	 */
	.fixed_container(@gutter, @padding, @container) when (@gutter > 0) and (@padding > 0) {
		&.inner {
			margin-left: ((@gutter + @padding) / 2) * -1px;
			margin-right: ((@gutter + @padding) / 2) * -1px;
		}
		&.outer {
			padding-left: ((@gutter + @padding) / 2) * 1px;
			padding-right: ((@gutter + @padding) / 2) * 1px;
		}
	}
	
/* --------------------------------------------------------------------------
   Fluid Column margins & paddings
   -------------------------------------------------------------------------- */
	
	/**
	 * some gutters & zero padding
	 */
	.fluid_column(@gutter, @padding, @container) when (@gutter > 0%) and (@padding = 0%) {
		padding-left: 0;
		padding-right: 0;
		margin-left: @gutter / 2;
		margin-right: @gutter / 2;
		*margin-left: (@gutter / 2) - (.25 / @container * 100 * 1%);
		*margin-right: (@gutter / 2) - (.25 / @container * 100 * 1%);
	}

	/**
	 * zero gutters & some padding
	 */
	.fluid_column(@gutter, @padding, @container) when (@gutter = 0%) and (@padding > 0%) {
		padding-left: @padding / 2;
		padding-right: @padding / 2;		
		margin-left: 0;
		margin-right: 0;
		*padding-left: (@padding / 2) - (.25 / @container * 100 * 1%);
		*padding-right: (@padding / 2) - (.25 / @container * 100 * 1%);
	}
	
	/**
	 * some gutters & some padding
	 */
	.fluid_column(@gutter, @padding, @container) when (@gutter > 0%) and (@padding > 0%) {
		padding-left: @padding / 2;
		padding-right: @padding / 2;
		margin-left: @gutter / 2;
		margin-right: @gutter / 2;
		*padding-left: (@padding / 2) - (.25 / @container * 100 * 1%);
		*padding-right: (@padding / 2) - (.25 / @container * 100 * 1%);
		*margin-left: (@gutter / 2) - (.25 / @container * 100 * 1%);
		*margin-right: (@gutter / 2) - (.25 / @container * 100 * 1%);
	}
	
	/**
	 * zero gutters, zero padding
	 */
	.fluid_column(@gutter, @padding, @container) when (@gutter = 0%) and (@padding = 0%) {
		padding-left: 0;
		padding-right: 0;
		margin-left: 0;
		margin-right: 0;
	}
	
/* --------------------------------------------------------------------------
   Fixed Column margins & paddings
   -------------------------------------------------------------------------- */
	
	/**
	 * some gutters, zero padding
	 */
	.fixed_column(@gutter, @padding, @container) when (@gutter > 0) and (@padding = 0) {
		padding-left: 0;
		padding-right: 0;
		margin-left: (@gutter / 2) + 0px;
		margin-right: (@gutter / 2) + 0px;
	}
	
	/**
	 * zero gutters, some padding
	 */
	.fixed_column(@gutter, @padding, @container) when (@gutter = 0) and (@padding > 0) {
		padding-left: (@padding / 2) + 0px;
		padding-right: (@padding / 2) + 0px;
		margin-left: 0;
		margin-right: 0;
	}
	
	/**
	 * some gutters, some padding
	 */
	.fixed_column(@gutter, @padding, @container) when (@gutter > 0) and (@padding > 0) {
		padding-left: (@padding / 2) + 0px;
		padding-right: (@padding / 2) + 0px;
		margin-left: (@gutter / 2) + 0px;
		margin-right: (@gutter / 2) + 0px;
	}
	
	/**
	 * zero gutters, zero padding
	 */
	.fixed_column(@gutter, @padding, @container) when (@gutter = 0) and (@padding = 0) {
		padding-left: 0;
		padding-right: 0;
		margin-left: 0;
		margin-right: 0;
	}
	
/* --------------------------------------------------------------------------
   Fluid Grid span, push, pull, prefix & suffix styles
   -------------------------------------------------------------------------- */
	
	// fluid > .span
	.span (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fluid') {
		width: (@column * @cols) + (@gutter * (@cols - 1)) + (@padding * (@cols - 1));
		*width: (@column * @cols) + (@gutter * (@cols - 1)) + (@padding * (@cols - 1)) - (.5 / @container * 100 * 1%);
	}
	
	// fluid > .push
	.push (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fluid') {
		left: (@column * @cols) + (@gutter * @cols) + (@padding * @cols);
		*left: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) - (.5 / @container * 100 * 1%);
	}
	
	// fluid > .pull
	.pull (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fluid') {
		right: (@column * @cols) + (@gutter * @cols) + (@padding * @cols);
		*right: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) - (.5 / @container * 100 * 1%);
	}
	
	// fluid > .prefix
	.prefix (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fluid') {
		padding-left: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + (@padding / 2);
		*padding-left: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + (@padding / 2) - (.5 / @container * 100 * 1%);
	}
	
	// fluid > .suffix
	.suffix (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fluid') {
		padding-right: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + (@padding / 2);
		*padding-right: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + (@padding / 2) - (.5 / @container * 100 * 1%);
	}
	
/* --------------------------------------------------------------------------
   Fixed Grid span, push, pull, prefix & suffix styles
   -------------------------------------------------------------------------- */
	
	// fixed > .span
	.span (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fixed') {
		width: (@column * @cols) + (@gutter * (@cols - 1)) + (@padding * (@cols - 1)) + 0px;
	}
	
	// fixed > .push
	.push (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fixed') {
		left: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + 0px;
	}
	
	// fixed > .pull
	.pull (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fixed') {
		right: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + 0px;
	}
	
	// fixed > .prefix
	.prefix (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fixed') {
		padding-left: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + (@padding / 2) + 0px;
	}
	
	// fixed > .suffix
	.suffix (@cols, @column, @gutter, @padding, @container, @type) when (@type = 'fixed') {
		padding-right: (@column * @cols) + (@gutter * @cols) + (@padding * @cols) + (@padding / 2) + 0px;
	}


/* --------------------------------------------------------------------------
   960 style grid loops
   -------------------------------------------------------------------------- */
	
	/**
	 * Main loop to set container and following grid class names
	 */
	.set_columns (@cols, @column, @gutter, @padding, @container, @type) { 
		(~".container_@{cols}") {
			#grid > .span_X (@cols, @column, @gutter, @padding, @container, @type);
			#grid > .push_X (@cols - 1, @column, @gutter, @padding, @container, @type);
			#grid > .pull_X (@cols - 1, @column, @gutter, @padding, @container, @type);
			#grid > .prefix_X (@cols - 1, @column, @gutter, @padding, @container, @type);
			#grid > .suffix_X (@cols - 1, @column, @gutter, @padding, @container, @type);
		}
	}
	
	/**
	 * loop for .span
	 */
	.span_X (@index, @column, @gutter, @padding, @container, @type) when (@index > 0) {
		(~".grid_@{index}") { #grid > .span(@index, @column, @gutter, @padding, @container, @type); }
		#grid > .span_X(@index - 1, @column, @gutter, @padding, @container, @type);
	}
	.span_X (0) {}
	
	/**
	 * loop for .push
	 */
	.push_X (@index, @column, @gutter, @padding, @container, @type) when (@index > 0) {
		(~".push_@{index}") { #grid > .push(@index, @column, @gutter, @padding, @container, @type); }
		#grid > .push_X(@index - 1, @column, @gutter, @padding, @container, @type);
	}
	.push_X (0) {}
	
	/**
	 * loop for .pull
	 */
	.pull_X (@index, @column, @gutter, @padding, @container, @type) when (@index > 0) {
		(~".pull_@{index}") { #grid > .pull(@index, @column, @gutter, @padding, @container, @type); }
		#grid > .pull_X(@index - 1, @column, @gutter, @padding, @container, @type);
	}
	.pull_X (0) {}
	
	/**
	 * loop for .prefix
	 */
	.prefix_X (@index, @column, @gutter, @padding, @container, @type) when (@index > 0) {
		(~".prefix_@{index}") { #grid > .prefix(@index, @column, @gutter, @padding, @container, @type); }
		#grid > .prefix_X(@index - 1, @column, @gutter, @padding, @container, @type);
	}
	.prefix_X (0) {}
	
	/**
	 * loop for .suffix
	 */
	.suffix_X (@index, @column, @gutter, @padding, @container, @type) when (@index > 0) {
		(~".suffix_@{index}") { #grid > .suffix(@index, @column, @gutter, @padding, @container, @type); }
		#grid > .suffix_X(@index - 1, @column, @gutter, @padding, @container, @type);
	}
	.suffix_X (0) {}


/* --------------------------------------------------------------------------
   960 style grid constructors
   -------------------------------------------------------------------------- */
	
	/**
	 * Fluid grid (a)
	 */
	.fluid (@a:0, @b:0, @c:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) when (@a>1) and (@b=0) and (@c=0) {
		(~'.container_@{a}') {
			#fluid > .container(@a, @gutter, @padding, @container);
		}
		(~'.container_@{a} [class*="grid_"]') {
			#fluid > .column(@a, @gutter, @padding, @container);
		}
		#fluid > .set_columns(@a, @b, @c, @gutter, @padding, @container);
	}
	
	/**
	 * Fluid grid (b)
	 */
	.fluid (@a:0, @b:0, @c:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) when (@a>1) and (@b>1) and (@c=0) {
		(~'.container_@{a}'),
		(~'.container_@{b}') {
			#fluid > .container(@a, @gutter, @padding, @container);
		}
		(~'.container_@{a} [class*="grid_"]'),
		(~'.container_@{b} [class*="grid_"]') {
			#fluid > .column(@a, @gutter, @padding, @container);
		}
		#fluid > .set_columns(@a, @b, @c, @gutter, @padding, @container);
	}

	/**
	 * Fluid grid (c)
	 */
	.fluid (@a:0, @b:0, @c:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) when (@a>1) and (@b>1) and (@c>1) {
		(~'.container_@{a}'),
		(~'.container_@{b}'),
		(~'.container_@{c}') {
			#fluid > .container(@a, @gutter, @padding, @container);
		}
		(~'.container_@{a} [class*="grid_"]'),
		(~'.container_@{b} [class*="grid_"]'),
		(~'.container_@{c} [class*="grid_"]') {
			#fluid > .column(@a, @gutter, @padding, @container);
		}
		#fluid > .set_columns(@a, @b, @c, @gutter, @padding, @container);
	}
	
	/**
	 * Fixed grid
	 */
	.fixed (@a:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) when (@a>1) {
		(~'.container_@{a}') {
			#fixed > .container(@a, @gutter, @padding, @container);
		}
		(~'.container_@{a} [class*="grid_"]') {
			#fixed > .column(@a, @gutter, @padding, @container);
		}
		#fixed > .set_columns(@a, @gutter, @padding, @container);
	}
}


/* --------------------------------------------------------------------------
   Fluid grid shortcuts
   -------------------------------------------------------------------------- */

#fluid {
	
	.container (@a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		// process output
		#grid > .grid_container;
		#grid > .fluid_container(@fluidGutter, @fluidPadding, @container);
		#grid > .clearfix;
	}
	
	.column (@a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		// process output
		#grid > .grid_column;
		#grid > .fluid_column(@fluidGutter, @fluidPadding, @container);
	}
	
	.set_columns (@a:0, @b:0, @c:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer, @type:'fluid') when (@a>1) and (@b=0) and (@c=0) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		// process output
		#grid > .set_columns (@a, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, @type);
	}
	
	.set_columns (@a:0, @b:0, @c:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer, @type:'fluid') when (@a>1) and (@b>1) and (@c=0) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		@gridColumn_b: (@container - (@gutter * @b) - (@padding * @b)) / @b;
		@fluidColumn_b: percentage(@gridColumn_b / @container);
		// process output
		#grid > .set_columns (@a, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, @type);
		#grid > .set_columns (@b, @fluidColumn_b, @fluidGutter, @fluidPadding, @container, @type);
	}
	
	.set_columns (@a:0, @b:0, @c:0, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer, @type:'fluid') when (@a>1) and (@b>1) and (@c>1) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		@gridColumn_b: (@container - (@gutter * @b) - (@padding * @b)) / @b;
		@fluidColumn_b: percentage(@gridColumn_b / @container);
		@gridColumn_c: (@container - (@gutter * @c) - (@padding * @c)) / @c;
		@fluidColumn_c: percentage(@gridColumn_c / @container);
		// process output
		#grid > .set_columns (@a, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, @type);
		#grid > .set_columns (@b, @fluidColumn_b, @fluidGutter, @fluidPadding, @container, @type);
		#grid > .set_columns (@c, @fluidColumn_c, @fluidGutter, @fluidPadding, @container, @type);
	}
	

	.span (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		// process output
		#grid > .span(@cols, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, 'fluid');
	}
	
	.push (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		// process output
		#grid > .push(@cols, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, 'fluid');
	}
	
	.pull (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		// process output
		#grid > .pull(@cols, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, 'fluid');
	}
	
	.prefix (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		// process output
		#grid > .prefix(@cols, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, 'fluid');
	}
	
	.suffix (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fluidGutter: percentage(@gutter / @container);
		@fluidPadding: percentage(@padding / @container);
		@gridColumn_a: (@container - (@gutter * @a) - (@padding * @a)) / @a;
		@fluidColumn_a: percentage(@gridColumn_a / @container);
		// process output
		#grid > .suffix(@cols, @fluidColumn_a, @fluidGutter, @fluidPadding, @container, 'fluid');
	}
}


/* --------------------------------------------------------------------------
   Fixed grid shortcuts
   -------------------------------------------------------------------------- */

#fixed {
	
	.container (@a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .grid_container;
		#grid > .fixed_container(@fixedGutter, @fixedPadding, @fixedContainer);
		#grid > .clearfix;
	}
	
	.column (@a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .grid_column;
		#grid > .fixed_column(@fixedGutter, @fixedPadding, @fixedContainer);
	}
	
	.set_columns (@a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer, @type:'fixed') {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .set_columns (@a, @fixedColumn, @fixedGutter, @fixedPadding, @fixedContainer, @type);
	}
	
	.span (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .span(@cols, @fixedColumn, @fixedGutter, @fixedPadding, @fixedContainer, 'fixed');
	}
	
	.push (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .push(@cols, @fixedColumn, @fixedGutter, @fixedPadding, @fixedContainer, 'fixed');
	}
	
	.pull (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .pull(@cols, @fixedColumn, @fixedGutter, @fixedPadding, @fixedContainer, 'fixed');
	}
	
	.prefix (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .prefix(@cols, @fixedColumn, @fixedGutter, @fixedPadding, @fixedContainer, 'fixed');
	}
	
	.suffix (@cols, @a:@defaultColumns, @gutter:@defaultGutter, @padding:@defaultPadding, @container:@defaultContainer) {
		// calculate widths
		@fixedGutter: floor(@gutter / 2) * 2;
		@fixedPadding: floor(@padding / 2) * 2;
		@fixedColumn: round((@container - (@fixedGutter * @a) - (@fixedPadding * @a)) / @a);
		@fixedContainer: (@fixedColumn * @a) + (@fixedGutter * @a) + (@fixedPadding * @a);
		// process output
		#grid > .suffix(@cols, @fixedColumn, @fixedGutter, @fixedPadding, @fixedContainer, 'fixed');
	}
}