/*! BFluid.less | version 2.0.0 | MIT license | https://github.com/BlowbackDesign/BFluid */

// --------------------------------------------------------------------------
// BFluid settings - override these after bfluid import, do not edit here!
// --------------------------------------------------------------------------

// grid defaults
@grid-layout: 12;
@grid-gutter: 20;
@grid-padding: 0;
@grid-container: 960;
@grid-direction: left;

// build classnames
@grid-use-prefix: true;
@grid-use-suffix: true;
@grid-use-push: true;
@grid-use-pull: true;

// classnames
@grid-name-separator: _;
@grid-name-container: container;
@grid-name-column: grid;
@grid-name-prefix: prefix;
@grid-name-suffix: suffix;
@grid-name-push: push;
@grid-name-pull: pull;
@grid-name-inner: inner;
@grid-name-outer: outer;
@grid-name-trim: trim;

// media queries
@grid-use-media: false;
@grid-media-namespace: tablet mobile;
@grid-media-breakpoint: 760px 360px;
@grid-media-direction: max; // min/max (mobile/desktop first)

// css transition
@grid-use-transition: true;
@grid-transition-duration: 0.125s;
@grid-transition-function: ease-in-out;

// golden ratio
@grid-use-golden: true;
@grid-golden-ratio: 1.6180339887498948482;

// TODO solution to nested elements with padding
@grid-use-fluid-padding: false;


// --------------------------------------------------------------------------
// General mixins
// --------------------------------------------------------------------------

#grid {
	// clearfix
	.clearfix() {
		&:before,
		&:after {
			display: table;
			content: "";
		}
		&:after {
			clear: both;
		}
	}
	// border box model
	.border-box() {
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		-ms-box-sizing: border-box;
		box-sizing: border-box;	
	}
	// hide overflow
	.trim() {
		overflow: hidden;
	}
}

// --------------------------------------------------------------------------
// Grid base styles
// --------------------------------------------------------------------------

#grid {
	.base() {
		body {
			text-align: @grid-direction;
			&.@{grid-name-trim} { #grid.trim(); }
		}
	}
}

// --------------------------------------------------------------------------
// Container base styles
// --------------------------------------------------------------------------

#grid {
	.container(@gutter:0) {
		list-style: none;
		width: 100%;
		padding-left: 0;
		padding-right: 0;
		margin-left: auto;
		margin-right: auto;
		#grid.border-box();
		#grid.clearfix();
		&.@{grid-name-trim} { #grid.trim(); }
		&.@{grid-name-inner} { #grid.inner-container(@gutter); }
		&.@{grid-name-outer} { #grid.outer-container(@gutter); }
	}
	.inner-container(@gutter:0) when not (@gutter = 0) {
		width: (100% / (100% - @gutter) * 100%);
		margin-left: (@gutter / -2);
		margin-right: (@gutter / -2);
	}
	.outer-container(@gutter:0) when not (@gutter = 0) {
		padding-left: (@gutter / 2);
		padding-right: (@gutter / 2);
	}
}

// --------------------------------------------------------------------------
// Column base styles
// --------------------------------------------------------------------------

#grid {
	.column(@gutter:0; @padding:0; @container:0) {
		position: relative;
		float: @grid-direction;
		min-height: 1px;
	}
	
	// column has zero gutter
	.column(@gutter:0; @padding:0; @container:0) when (@gutter = 0) {
		margin-left: 0;
		margin-right: 0;
	}
	
	// column has some gutter
	.column(@gutter:0; @padding:0; @container:0) when not (@gutter = 0) {
		margin-left: (@gutter / 2);
		margin-right: (@gutter / 2);
	}
	
	// column has pixel padding
	.column(@gutter:0; @padding:0; @container:0) when (ispixel(@padding)) and not (@padding = 0) {
		padding-left: floor(@padding / 2);
		padding-right: floor(@padding / 2);
	}
	
	// column has em or percent padding
	.column(@gutter:0; @padding:0; @container:0) when (isem(@padding)), (ispercentage(@padding)) and not (@padding = 0) {
		padding-left: (@padding / 2);
		padding-right: (@padding / 2);
	}
	
	// column has unitless padding
	.column(@gutter:0; @padding:0; @container:0) when (isnumber(@padding)) and not (isem(@padding)) and not (ispixel(@padding)) and not (ispercentage(@padding)) and not (@padding = 0) {
		@_padding: percentage(unit(@padding) / unit(@container)); 
		padding-left: (@_padding / 2);
		padding-right: (@_padding / 2);
	}
	
	.column(...) {
		#grid.border-box();
		&.@{grid-name-trim} { #grid.trim(); }
	}
	
	.column(...) when (@grid-use-transition = true) {
		-webkit-transition: none @grid-transition-function @grid-transition-duration;
		   -moz-transition: none @grid-transition-function @grid-transition-duration;
		     -o-transition: none @grid-transition-function @grid-transition-duration;
		        transition: none @grid-transition-function @grid-transition-duration;
		-webkit-transition-property: width, height, margin, padding, top, right, bottom, left;
		   -moz-transition-property: width, height, margin, padding, top, right, bottom, left;
		     -o-transition-property: width, height, margin, padding, top, right, bottom, left;
		        transition-property: width, height, margin, padding, top, right, bottom, left;
	}
	
}

// --------------------------------------------------------------------------
// Setters for column width, position and gutter
// --------------------------------------------------------------------------

#grid {
	
	// element width
	.span(@cols; @column; @gutter) {
		width: (@column * @cols) + (@gutter * (@cols - 1));
	}
	
	// push element (1+) [ltr]
	.push(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = left) {
		left: (@column * @cols) + (@gutter * @cols);
	}
	// push element (1+) [rtl]
	.push(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = right) {
		right: (@column * @cols) + (@gutter * @cols);
	}
	// push reset (0) [ltr]
	.push(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = left) {
		left: auto;
	}
	// push reset (0) [rtl]
	.push(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = right) {
		right: auto;
	}
	
	// pull element (1+) [ltr]
	.pull(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = left) {
		right: (@column * @cols) + (@gutter * @cols);
	}
	// pull element (1+) [rtl]
	.pull(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = right) {
		left: (@column * @cols) + (@gutter * @cols);
	}
	// pull reset (0) [ltr]
	.pull(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = left) {
		right: auto;
	}
	// pull reset (0) [rtl]
	.pull(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = right) {
		left: auto;
	}
	
	// prefix element (1+) [ltr]
	.prefix(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = left) {
		margin-left: (@column * @cols) + (@gutter * @cols) + (@gutter / 2);
	}
	// prefix element (1+) [rtl]
	.prefix(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = right) {
		margin-right: (@column * @cols) + (@gutter * @cols) + (@gutter / 2);
	}
	// prefix reset (0) [ltr]
	.prefix(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = left) {
		margin-left: (@gutter / 2);
	}
	// prefix reset (0) [rtl]
	.prefix(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = right) {
		margin-right: (@gutter / 2);
	}
	
	// suffix element (1+) [ltr]
	.suffix(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = left) {
		margin-right: (@column * @cols) + (@gutter * @cols) + (@gutter / 2);
	}
	// suffix element (1+) [rtl]
	.suffix(@cols; @column; @gutter) when (@cols > 0) and (@grid-direction = right) {
		margin-left: (@column * @cols) + (@gutter * @cols) + (@gutter / 2);
	}
	// suffix reset (0) [ltr]
	.suffix(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = left) {
		margin-right: (@gutter / 2);
	}
	// suffix reset (0) [rtl]
	.suffix(@cols; @column; @gutter) when (@cols = 0) and (@grid-direction = right) {
		margin-left: (@gutter / 2);
	}
	
}

// --------------------------------------------------------------------------
// Alignment for golden grid columns
// --------------------------------------------------------------------------

#grid {
	
	// element width (a)
	.golden-span(@cols; @layout; @column; @gutter) when (@cols = a) {
		#grid.set-golden-units(@layout; @column; @gutter);
		width: @span-a;
	}
	// element width (b)
	.golden-span(@cols; @layout; @column; @gutter) when (@cols = b) {
		#grid.set-golden-units(@layout; @column; @gutter);
		width: @span-b;
	}
	
	// push element (a) [ltr]
	.golden-push(@cols; @layout; @column; @gutter) when (@cols = a) and (@grid-direction = left) {
		#grid.set-golden-units(@layout; @column; @gutter);
		left: (@span-a + @gutter);
	}
	// push element (b) [ltr]
	.golden-push(@cols; @layout; @column; @gutter) when (@cols = b) and (@grid-direction = left) {
		#grid.set-golden-units(@layout; @column; @gutter);
		left: (@span-b + @gutter);
	}
	// push element (a) [rtl]
	.golden-push(@cols; @layout; @column; @gutter) when (@cols = a) and (@grid-direction = right) {
		#grid.set-golden-units(@layout; @column; @gutter);
		right: (@span-a + @gutter);
	}
	// push element (b) [rtl]
	.golden-push(@cols; @layout; @column; @gutter) when (@cols = b) and (@grid-direction = right) {
		#grid.set-golden-units(@layout; @column; @gutter);
		right: (@span-b + @gutter);
	}
	
	// pull element (a) [ltr]
	.golden-pull(@cols; @layout; @column; @gutter) when (@cols = a) and (@grid-direction = left) {
		#grid.set-golden-units(@layout; @column; @gutter);
		right: (@span-a + @gutter);
	}
	// pull element (b) [ltr]
	.golden-pull(@cols; @layout; @column; @gutter) when (@cols = b) and (@grid-direction = left) {
		#grid.set-golden-units(@layout; @column; @gutter);
		right: (@span-b + @gutter);
	}
	// pull element (a) [rtl]
	.golden-pull(@cols; @layout; @column; @gutter) when (@cols = a) and (@grid-direction = right) {
		#grid.set-golden-units(@layout; @column; @gutter);
		left: (@span-a + @gutter);
	}
	// pull element (b) [rtl]
	.golden-pull(@cols; @layout; @column; @gutter) when (@cols = b) and (@grid-direction = right) {
		#grid.set-golden-units(@layout; @column; @gutter);
		left: (@span-b + @gutter);
	}
	
}

// --------------------------------------------------------------------------
// Reset grid alignment
// --------------------------------------------------------------------------

#grid {
	.reset(@l:@grid-layout; @g:@grid-gutter; @w:@grid-container) {
		[class*="@{grid-name-column}@{grid-name-separator}"] {
			#grid.reset-column(@l; @g; @w);
		}
	}
	.reset-column(@l:@grid-layout; @g:@grid-gutter; @w:@grid-container) {
		width: auto;
		left: auto;
		right: auto;
	}
	.reset-column(@l:@grid-layout; @g:@grid-gutter; @w:@grid-container) when (@g = 0) {
		margin-left: 0;
		margin-right: 0;
	}
	.reset-column(@l:@grid-layout; @g:@grid-gutter; @w:@grid-container) when not (@g = 0) {
		#grid.set-units(@l; @g; @w);
		margin-left: (@gutter / 2);
		margin-right: (@gutter / 2);
	}
}

// --------------------------------------------------------------------------
// Builders for grid class names
// --------------------------------------------------------------------------

#grid {
	.build-span(@cols; @column; @gutter; @name) when (@cols >= 0) and (@name = "") {
		.@{grid-name-column}@{grid-name-separator}@{cols} { 
			#grid.span(@cols; @column; @gutter);
		} #grid.build-span((@cols - 1); @column; @gutter; @name);
	}
	.build-span(@cols; @column; @gutter; @name) when (@cols >= 0) and (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-column}@{grid-name-separator}@{cols} { 
			#grid.span(@cols; @column; @gutter);
		} #grid.build-span((@cols - 1); @column; @gutter; @name);
	}
	.build-push(@cols; @column; @gutter; @name) when (@cols >= 0) and (@name = "") {
		.@{grid-name-push}@{grid-name-separator}@{cols} { 
			#grid.push(@cols; @column; @gutter);
		} #grid.build-push((@cols - 1); @column; @gutter; @name);
	}
	.build-push(@cols; @column; @gutter; @name) when (@cols >= 0) and (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-push}@{grid-name-separator}@{cols} { 
			#grid.push(@cols; @column; @gutter);
		} #grid.build-push((@cols - 1); @column; @gutter; @name);
	}
	.build-pull(@cols; @column; @gutter; @name) when (@cols >= 0) and (@name = "") {
		.@{grid-name-pull}@{grid-name-separator}@{cols} { 
			#grid.pull(@cols; @column; @gutter);
		} #grid.build-pull((@cols - 1); @column; @gutter; @name);
	}
	.build-pull(@cols; @column; @gutter; @name) when (@cols >= 0) and (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-pull}@{grid-name-separator}@{cols} { 
			#grid.pull(@cols; @column; @gutter);
		} #grid.build-pull((@cols - 1); @column; @gutter; @name);
	}
	.build-prefix(@cols; @column; @gutter; @name) when (@cols >= 0) and (@name = "") {
		.@{grid-name-prefix}@{grid-name-separator}@{cols} { 
			#grid.prefix(@cols; @column; @gutter);
		} #grid.build-prefix((@cols - 1); @column; @gutter; @name);
	}
	.build-prefix(@cols; @column; @gutter; @name) when (@cols >= 0) and (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-prefix}@{grid-name-separator}@{cols} { 
			#grid.prefix(@cols; @column; @gutter);
		} #grid.build-prefix((@cols - 1); @column; @gutter; @name);
	}
	.build-suffix(@cols; @column; @gutter; @name) when (@cols >= 0) and (@name = "") {
		.@{grid-name-suffix}@{grid-name-separator}@{cols} { 
			#grid.suffix(@cols; @column; @gutter);
		} #grid.build-suffix((@cols - 1); @column; @gutter; @name);
	}
	.build-suffix(@cols; @column; @gutter; @name) when (@cols >= 0) and (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-suffix}@{grid-name-separator}@{cols} { 
			#grid.suffix(@cols; @column; @gutter);
		} #grid.build-suffix((@cols - 1); @column; @gutter; @name);
	}
}

// --------------------------------------------------------------------------
// Builders for golden grid class names
// --------------------------------------------------------------------------

#grid {
	.build-golden-span(@cols; @layout; @column; @gutter; @name) when (@name = "") {
		.@{grid-name-column}@{grid-name-separator}@{cols} {
			#grid.golden-span(@cols; @layout; @column; @gutter);
		}
	}
	.build-golden-span(@cols; @layout; @column; @gutter; @name) when (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-column}@{grid-name-separator}@{cols} {
			#grid.golden-span(@cols; @layout; @column; @gutter);
		}
	}
	.build-golden-push(@cols; @layout; @column; @gutter; @name) when (@name = "") {
		.@{grid-name-push}@{grid-name-separator}@{cols} {
			#grid.golden-push(@cols; @layout; @column; @gutter);
		}
	}
	.build-golden-push(@cols; @layout; @column; @gutter; @name) when (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-push}@{grid-name-separator}@{cols} {
			#grid.golden-push(@cols; @layout; @column; @gutter);
		}
	}
	.build-golden-pull(@cols; @layout; @column; @gutter; @name) when (@name = "") {
		.@{grid-name-pull}@{grid-name-separator}@{cols} {
			#grid.golden-pull(@cols; @layout; @column; @gutter);
		}
	}
	.build-golden-pull(@cols; @layout; @column; @gutter; @name) when (iskeyword(@name)) {
		.@{name}@{grid-name-separator}@{grid-name-pull}@{grid-name-separator}@{cols} {
			#grid.golden-pull(@cols; @layout; @column; @gutter);
		}
	}
}

// --------------------------------------------------------------------------
// Builders for grid layout and columns
// --------------------------------------------------------------------------

#grid {
	// builds single layout
	.build-layout(@layout; @gutter; @padding; @column; @container; @name) {
		.@{grid-name-container}@{grid-name-separator}@{layout} {
			#grid.container(@gutter);
			[class*="@{grid-name-column}@{grid-name-separator}"] {
				#grid.column(@gutter; @padding; @container);
			}
		}
		#grid.build-columns(@layout; @column; @gutter; @name);
	}
	// builds column classnames
	.build-columns(@layout; @column; @gutter; @name) { 
		.@{grid-name-container}@{grid-name-separator}@{layout} { 
			#grid.build-span(@layout; @column; @gutter; @name); 
			#grid.build-column-classnames(@layout; @column; @gutter; @name); 
		}
	}
}

// --------------------------------------------------------------------------
// Helper to build (enabled) optional class names
// --------------------------------------------------------------------------

#grid {
	// golden span
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-golden = true) {
		#grid.build-golden-span(a; @layout; @column; @gutter; @name); 
		#grid.build-golden-span(b; @layout; @column; @gutter; @name); 
	}
	// push
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-push = true) {
		#grid.build-push((@layout - 1); @column; @gutter; @name); 
	}
	// golden push
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-push = true) and (@grid-use-golden = true) {
		#grid.build-golden-push(a; @layout; @column; @gutter; @name); 
		#grid.build-golden-push(b; @layout; @column; @gutter; @name); 
	}
	// pull
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-pull = true) {
		#grid.build-pull((@layout - 1); @column; @gutter; @name); 
	}
	// golden pull
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-pull = true) and (@grid-use-golden = true) {
		#grid.build-golden-pull(a; @layout; @column; @gutter; @name); 
		#grid.build-golden-pull(b; @layout; @column; @gutter; @name); 
	}
	// prefix
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-prefix = true) {
		#grid.build-prefix((@layout - 1); @column; @gutter; @name); 
	}
	// suffix
	.build-column-classnames(@layout; @column; @gutter; @name) when (@grid-use-suffix = true) {
		#grid.build-suffix((@layout - 1); @column; @gutter; @name); 
	}
}

// --------------------------------------------------------------------------
// Handle base grid layouts
// --------------------------------------------------------------------------

#grid {
	.layout(@l; @g; @p; @w; @n; @i:1) when (isnumber(extract(@l, @i))) { 
		@layout: extract(@l, @i); 
		#grid.set-units(@layout; @g; @w);
		#grid.build-layout(@layout; @gutter; @p; @column; @w; @n); 
		#grid.layout(@l; @g; @p; @w; @n; (@i + 1)); // try to find next layout
	}
}

// --------------------------------------------------------------------------
// Handle media query breakpoints
// --------------------------------------------------------------------------

#grid {
	.media(@l; @g; @p; @w; @n; @i:1) when (isnumber(extract(@l, @i))) { 
		@layout: extract(@l, @i); 
		#grid.set-units(@layout; @g; @w);
		#grid.build-columns(@layout; @column; @gutter; @n); 
		#grid.media(@l; @g; @p; @w; @n; (@i + 1)); // try to find next layout
	}
}

// --------------------------------------------------------------------------
// Main build mixin
// --------------------------------------------------------------------------

#grid {
	// execute once on every build
	.build(@l:@grid-layout; @g:@grid-gutter; @p:@grid-padding; @w:@grid-container; @i:1) when (@i = 1) { 
		@namespace: ""; // empty string for null (namespace == iskeyword)
		#grid.base(); 
		@media screen { 
			#grid.layout(@l; @g; @p; @w; @namespace); 
		}
	}
	// guard for media queries
	.build(@l:@grid-layout; @g:@grid-gutter; @p:@grid-padding; @w:@grid-container; @i:1) when (@grid-use-media = true) and (isnumber(extract(@grid-media-breakpoint, @i))) and (iskeyword(extract(@grid-media-namespace, @i))) {
		@namespace: extract(@grid-media-namespace, @i); 
		@breakpoint: extract(@grid-media-breakpoint, @i); 
		#grid.media-min-max(@l; @g; @p; @w; @namespace; @breakpoint); 
		#grid.build(@l; @g; @p; @w; (@i + 1)); // try to find next breakpoint
	}	
}

// --------------------------------------------------------------------------
// Helper mixin for media min/max
// --------------------------------------------------------------------------

#grid {
	// guard for min media-direction (mobile first)
	.media-min-max(@l; @g; @p; @w; @n; @b) when (@grid-media-direction = min) {
		@media screen and (min-width: @b) { 
			#grid.media(@l; @g; @p; @w; @n); 
		}
	}
	// guard for max media-direction (desktop first)
	.media-min-max(@l; @g; @p; @w; @n; @b) when (@grid-media-direction = max) {
		@media screen and (max-width: @b) { 
			#grid.media(@l; @g; @p; @w; @n); 
		}
	}
}

// --------------------------------------------------------------------------
// Set and sanitize @gutter and @column
// --------------------------------------------------------------------------

#grid {
	// @layout (int), @gutter (mixed), @container (mixed)
	.set-units(@l; @g; @w) {
		@_w: unit(@w);
		@_g: unit(@g);
		@gutter: percentage(@_g / @_w);
		@column: percentage(((@_w - (@_g * @l)) / @l) / @_w);
	}
}

// --------------------------------------------------------------------------
// Set @span-a and @span-b for golden grid
// --------------------------------------------------------------------------

#grid {
	// @layout (int), @column (percent), @gutter (percent)
	.set-golden-units(@l; @c; @g) {
		@_w: (@c * @l) + (@g * (@l - 2));
		@span-a: @_w / @grid-golden-ratio;
		@span-b: @_w - @span-a;
	}
}

// --------------------------------------------------------------------------
// TODO Semantic grid shortcuts
// --------------------------------------------------------------------------
